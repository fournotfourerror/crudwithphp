{"version":3,"sources":["Info.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Info","$","ajax","type","url","data","sData","success","document","getElementById","innerHTML","className","border","style","boxShadow","background","id","React","Component","Form","props","changeName","e","setState","name","target","value","changeEmail","email","changeAddress","address","state","click","lname","val","lemail","laddress","alert","marginTop","placeholder","ref","onChange","App","to","href","data-toggle","data-target","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8255160f.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nclass Info extends React.Component{\r\n    componentWillMount(){\r\n        $.ajax({\r\n            type:\"post\",\r\n            url:\"http://localhost/reactcrud/index.php\",\r\n            data:{sData:\"1\"},\r\n            success:function(data){\r\n               document.getElementById(\"data\").innerHTML=data;\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"col-md-6 offset-3\">\r\n                    <table className=\"table table-condensed\" border=\"1\" style={{boxShadow:\"0px 8px 8px -8px #000\"}}>\r\n                        <thead>\r\n                            <tr style={{background:\"#20368f\"}} className=\"text-light\">\r\n                                <th> Name </th>\r\n                                <th> Email </th>\r\n                                <th> Address </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody id=\"data\"></tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n// import axios from 'axios';\r\nimport $ from 'jquery';\r\n\r\n\r\nclass Form extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n          name:'',\r\n          email:'',\r\n          address:''\r\n        }\r\n      }\r\n    \r\n      changeName=(e)=>{\r\n        this.setState({\r\n          name:e.target.value\r\n        })\r\n      }\r\n    \r\n      changeEmail=(e)=>{\r\n        this.setState({\r\n          email:e.target.value\r\n        })\r\n      }\r\n    \r\n      changeAddress=(e)=>{\r\n        this.setState({\r\n          address:e.target.value\r\n        })\r\n      }\r\n     \r\n\r\n      componentDidMount(){\r\n          $('button').click(function(){\r\n            // e.preventDefault();\r\n        let lname=$('#name').val();\r\n        let lemail=$('#email').val();\r\n        let laddress=$('#address').val();\r\n        if(lname===\"\" || lemail===\"\" || laddress===\"\"){\r\n          alert(\"Fill all the fields\");\r\n          // this.refs.name.style.border=\"1px solid red\"\r\n        } else {\r\n          $.ajax({\r\n            type:\"post\",\r\n            url:\"http://localhost/reactcrud/index.php\",\r\n            data:{name:lname,email:lemail,address:laddress},\r\n            success:function(data){\r\n              alert(\"Data inserted successfully\");\r\n            }\r\n          })\r\n        }\r\n          });\r\n      }\r\n        \r\n    render(){\r\n        return(\r\n            <div>\r\n               \r\n      <div className=\"col-md-4 offset-4\" style={{marginTop:\"3%\"}}>\r\n        <div className=\"card bg-light\" style={{boxShadow:\"0px 8px 8px -8px #000\"}}>\r\n          <div className=\"card-body\">\r\n            <form>\r\n              <input id=\"name\" type=\"text\" placeholder=\"Name\" ref=\"name\" onChange={(e)=>this.changeName(e)}className=\"form-control\" /> <br>\r\n              </br>\r\n              <input id=\"email\" type=\"email\" placeholder=\"E-mail\" ref=\"email\" onChange={(e)=>this.changeEmail(e)} className=\"form-control\"></input> <br>\r\n              </br>\r\n              <textarea id=\"address\" className=\"form-control\" ref=\"address\" onChange={(e)=>this.changeAddress(e)} placeholder=\"Address\"></textarea> <br></br>\r\n              <button type=\"button\" className=\"btn btn-primary btn-block\"> Subscribe </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Info from './Info'\n\nimport Form from './Form';\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  \n  render(){\n  return (\n    <div className=\"App\">\n       <Router>\n      <nav className=\"navbar navbar-expand-md bg-primary navbar-dark\">\n\n  <Link to={\"/\"} className=\"navbar-brand\" href=\"#\">React Sample</Link>\n\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        {/* <a className=\"nav-link\" href=\"#\">Link</a>\n         */}\n         <Link to={\"/show\"} className=\"nav-link\">Show Data</Link>\n      </li>\n    </ul>\n  </div>\n</nav>\n<Switch>\n    {/* <Route exact path=\"/\" component={App}></Route> */}\n    <Route exact path=\"/\" component={Form} />\n    <Route exact path=\"/show\" component={ Info } />\n</Switch>\n</Router> \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}